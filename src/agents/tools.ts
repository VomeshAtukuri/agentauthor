import { z } from "zod";
import { Tool } from "@langchain/core/tools";
console.log("----------------------------");

// üß† Tavily Research Tool
class TavilyTool extends Tool {
  apiKey: string;
  name = "Tavily Research Tool";
  description = "This tool allows you to search for information using Tavily.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z
      .object({
        input: z.string().optional().describe("Describe the expected input"),
      })
      .transform((val) => val.input);
  }

  async _call(input: string) {
    console.log("üîç Tavily Search Input:", input);
    const body = JSON.stringify({
      query: input,
      auto_parameters: false,
      topic: "general",
      search_depth: "advanced",
      chunks_per_source: 3,
      max_results: 1,
      days: 7,
      include_answer: true,
      include_raw_content: true,
      include_images: true,
    });

    const res = await fetch("https://api.tavily.com/search", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`,
      },
      body,
    }).then((res) => res.json());

    console.log("‚úÖ Tavily Results:", res.query, res.answer);
    return res;
  }
}

// üêô GitHub Deployment Tool
class GitHubTool extends Tool {
  apiKey: string | undefined;
  name = "GitHub Deployment Tool";
  description =
    "Creates a GitHub repo and commits the HTML content as index.html.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z
      .object({
        input: z.string().optional().describe("HTML content to commit"),
      })
      .transform((val) => val.input);
  }

  async _call(input: string) {
    console.log("üêô GitHubTool: Received HTML input.");

    // Step 1: Create repo
    const createRepoResponse = await fetch(
      "https://api.github.com/user/repos",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-GitHub-Api-Version": "2022-11-28",
          Authorization: `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          name: "avi-blog",
          description: "This is a blog generated by AI.",
          homepage: "https://github.com",
          private: false,
          is_template: true,
        }),
      }
    );

    const repo = await createRepoResponse.json();
    if (!repo.name)
      throw new Error("‚ùå Failed to create repo: " + JSON.stringify(repo));

    console.log("‚úÖ GitHub Repo Created:", repo.full_name);

    // Step 2: Get current user for username
    const user = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
      },
    }).then((res) => res.json());

    const username = user.login;
    const contentEncoded = btoa(unescape(encodeURIComponent(input)));

    // Step 3: Commit HTML to repo
    const commitResponse = await fetch(
      `https://api.github.com/repos/${username}/${repo.name}/contents/index.html`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "X-GitHub-Api-Version": "2022-11-28",
          Authorization: `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          message: "ai_commit",
          content: contentEncoded,
        }),
      }
    );

    const commit = await commitResponse.json();
    console.log("‚úÖ GitHub Commit Complete:", commit.content?.path);

    return {
      repo,
      commit,
    };
  }
}

// üöÄ Vercel Deployment Tool
class VercelTool extends Tool {
  apiKey: string | undefined;
  name = "Vercel Deployment Tool";
  description = "Deploys a GitHub repo to Vercel using Vercel REST API.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z
      .object({
        input: z.string().describe("GitHub repo name to deploy"),
      })
      .transform((val) => val.input);
  }

  async _call(repoName: string) {
    console.log("üöÄ VercelTool: Deploying GitHub repo:", repoName);

    const teamOrUser = "vomeshatukuri"; // üîÅ Change to your actual Vercel team slug or username
    const vercelURL = `https://api.vercel.com/v13/deployments`;

    const payload = {
      name: repoName,
      gitSource: {
        type: "github",
        repo: repoName,
        ref: "main",
        org: teamOrUser,
      },
      target: "production",
      projectSettings: {
        framework: null,
        buildCommand: null,
        installCommand: null,
        devCommand: null,
        outputDirectory: ".",
        rootDirectory: null,
      },
    };

    const res = await fetch(vercelURL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();

    if (!res.ok) {
      console.error("‚ùå Vercel Deployment Error:", result);
      throw new Error(
        `Vercel API error: ${result.error?.message || "Unknown error"}`
      );
    }

    console.log("‚úÖ Vercel Deployment Started:", result.name);

    return {
      status: result.status,
      id: result.id,
      name: result.name,
      url: `https://${result.name}.vercel.app`,
    };
  }
}

export { TavilyTool, GitHubTool, VercelTool };
