import { z } from "zod";
import { Tool } from "@langchain/core/tools";
console.log("----------------------------");

// üß† Tavily Research Tool
class TavilyTool extends Tool {
  apiKey: string;
  name = "Tavily Research Tool";
  description = "This tool allows you to search for information using Tavily.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z
      .object({
        input: z.string().optional().describe("Describe the expected input"),
      })
      .transform((val) => val.input);
  }

  async _call(input: string) {
    console.log("üîç Tavily Search Input:", input);
    const body = JSON.stringify({
      query: input,
      auto_parameters: false,
      topic: "general",
      search_depth: "basic",
      chunks_per_source: 3,
      max_results: 1,
      days: 7,
      include_answer: true,
      include_raw_content: true,
      include_images: true,
    });

    const res = await fetch("https://api.tavily.com/search", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`,
      },
      body,
    }).then((res) => res.json());

    console.log("‚úÖ Tavily Results:", res.query, res.answer);
    return res;
  }
}

// üêô GitHub Deployment Tool
class GitHubTool extends Tool {
  apiKey: string | undefined;
  name = "GitHub Deployment Tool";
  description =
    "Creates a GitHub repo and commits the HTML content as index.html.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z.object({
      repoName: z.string().optional().describe("Repo name to create"),
      content: z.string().optional().describe("HTML content to commit"),
    });
  }

  async _call(input: { repoName: string; content: string } | string) {
    let repoName: string | undefined;
    let content: string | undefined;

    if (typeof input === "string") {
      content = input;
    } else if (typeof input === "object" && input !== null) {
      repoName = input.repoName;
      content = input.content;
    }
    console.log("üêô GitHubTool: Received input:", repoName);
    console.log("üêô GitHubTool: Received content:", content);
    if (!repoName || !content) {
      throw new Error("repoName and content are required.");
    }
    try {
      const createRepoResponse = await fetch(
        "https://api.github.com/user/repos",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": "2022-11-28",
            Authorization: `Bearer ${this.apiKey}`,
          },
          body: JSON.stringify({
            name: repoName,
            description: "This is a blog generated by AI.",
            homepage: "https://github.com",
            private: false,
            is_template: true,
          }),
        }
      );

      const repo = await createRepoResponse.json();
      if (!repo.name)
        throw new Error("‚ùå Failed to create repo: " + JSON.stringify(repo));

      console.log("‚úÖ GitHub Repo Created:", repo.full_name);

      const user = await fetch("https://api.github.com/user", {
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
        },
      }).then((res) => res.json());

      const username = user.login;
      const contentEncoded = btoa(unescape(encodeURIComponent(content)));

      const commitResponse = await fetch(
        `https://api.github.com/repos/${username}/${repo.name}/contents/index.html`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": "2022-11-28",
            Authorization: `Bearer ${this.apiKey}`,
          },
          body: JSON.stringify({
            message: "ai_commit",
            content: contentEncoded,
          }),
        }
      );

      const commit = await commitResponse.json();
      console.log("‚úÖ GitHub Commit Complete:", commit.content?.path);

      return {
        repo,
        commit,
      };
    } catch (err) {
      console.error("‚ùå GitHub Deployment Error:", err);
      throw err;
    }
  }
}

class VercelTool extends Tool {
  apiKey: string | undefined;
  name = "Vercel Deployment Tool";
  description = "Deploys a GitHub repo to Vercel using Vercel REST API.";

  constructor(fields: any) {
    super(fields);
    this.apiKey = fields?.apiKey || "";
    this.schema = z
      .object({
        name: z.string().optional().describe("Repo name to deploy"),
        url: z.string().describe("GitHub repo URL to deploy"),
      })
      .transform((val) => val); // keep the full object, not just the URL
  }

  async _call(input: { name?: string; url: string }) {
    const { name, url } = input;

    console.log("üöÄ VercelTool: Received input:", input);

    // Extract repo name from GitHub URL if not provided
    const repoName =
      name ||
      (() => {
        const match = url.match(/github\.com\/[^/]+\/([^/]+)(?:\.git)?/);
        return match ? match[1] : undefined;
      })();

    if (!repoName) {
      throw new Error("Could not extract repo name from URL.");
    }

    console.log("üì¶ Repo Name:", repoName);
    console.log("üåê Repo URL:", url);

    const teamOrUser = "vomeshatukuri";
    const vercelURL = `https://api.vercel.com/v13/deployments`;

    const payload = {
      name: "av" + repoName,
      gitSource: {
        type: "github",
        repo: repoName,
        ref: "main",
        org: teamOrUser,
      },
      target: "production",
      projectSettings: {
        framework: null,
        buildCommand: null,
        installCommand: null,
        devCommand: null,
        outputDirectory: ".",
        rootDirectory: null,
      },
    };

    const res = await fetch(vercelURL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();

    if (!res.ok) {
      console.error("‚ùå Vercel Deployment Error:", result);
      throw new Error(
        `Vercel API error: ${result.error?.message || "Unknown error"}`
      );
    }

    console.log("‚úÖ Vercel Deployment Started:", result.name);

    return {
      status: result.status,
      id: result.id,
      name: result.name,
      url: `https://${result.name}.vercel.app`,
    };
  }
}

// Example main function to use the tool
// async function main() {
//   const vercel = new VercelTool({
//     apiKey: "YOUR_VERCEL_API_KEY", // Replace with your actual token
//   });

//   const input = {
//     name: "dockercmp", // optional ‚Äî can be auto-extracted from URL
//     url: "https://github.com/vomeshatukuri/aisdkblog",
//   };

//   try {
//     const res = await vercel._call(input);
//     console.log("üîó Deployed URL:", res.url);
//   } catch (err) {
//     console.error("‚ùå Deployment failed:", err.message);
//   }
// }

// main();

export { TavilyTool, GitHubTool, VercelTool };
